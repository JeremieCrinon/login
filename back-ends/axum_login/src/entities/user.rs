//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub email_verification_code: Option<String>,
    pub password_reset_code: Option<String>,
    pub roles: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

// Add the struct ListUser, which corresponds to what it will return when it lists all the users to the front-end.
#[derive(Serialize)]
pub struct ListUser {
    pub id: i32,
    pub email: String,
    pub roles: Json,
}

impl From<Model> for ListUser {
    fn from(user: Model) -> Self {
        Self {
            id: user.id,
            email: user.email,
            roles: user.roles,
        }
    }
}

// Add the struct GetUser, which corresponds to what it will return when it returns a user details to the front-end.
#[derive(Serialize)]
pub struct GetUser {
    pub id: i32,
    pub email: String,
    pub roles: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

impl From<Model> for GetUser {
    fn from(user: Model) -> Self {
        Self {
            id: user.id,
            email: user.email,
            roles: user.roles,
            created_at: user.created_at,
            updated_at: user.updated_at,
        }
    }
}
